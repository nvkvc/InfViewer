package model.file;



import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;

import javax.swing.JOptionPane;

import model.ListaModel;
import ui.app.AppCore;
import view.FileView;


public class UISERFile extends UIAbstractFile {
	


	
	public UISERFile(String path,String headerName, boolean directory) {
		super(path,headerName,directory);
	
	}


	public UISERFile() {
		super();
	}







    /**
     *  Prenos bloka iz datoteke u radnu memoriju aplikacije
     *  Velicina bloka određena je atributom BLOCK_SIZE 
     *  Po zavšetku metode blok podataka iz datoteke
     *  nalazi se u radnoj memoriji aplikaciji
     *  u matrici datа[][]
     * @throws IOException 
     * 
     */	
	public boolean fetchNextBlock() throws IOException{
    	       
				  
			  RandomAccessFile afile=new RandomAccessFile(path+File.separator+fileName,"r");
			  FILE_SIZE=afile.length();
			  RECORD_NUM=(long) Math.ceil((FILE_SIZE*1.0000)/(RECORD_SIZE*1.0000));
			  BLOCK_NUM=(int) (RECORD_NUM/BLOCK_FACTOR)+1;
			  
			  
			  //BUFFER_SIZE je uvek jednak broju slogova u jednom bloku * velicina jednog sloga
			  //izuzev ako poslednji blok nije pun blok
			  if (FILE_POINTER/RECORD_SIZE+BLOCK_FACTOR>RECORD_NUM) 
				   BUFFER_SIZE=(int) (RECORD_NUM-FILE_POINTER/RECORD_SIZE)*RECORD_SIZE;
			  else 
				   BUFFER_SIZE=(int)(RECORD_SIZE*BLOCK_FACTOR);
			  
			  buffer=new byte[BUFFER_SIZE];
			  data = new String[(int) BUFFER_SIZE/RECORD_SIZE][];
			  //po otvaranju pozicioniram se na prethodni kraj zahvata
			  afile.seek(FILE_POINTER);
			  afile.read(buffer);
		      String contentS=new String(buffer);
		      if (contentS.length()<buffer.length){
		    	  for (int x=contentS.length();x<buffer.length;x++)
		    		  contentS=contentS+" ";
		      }
		
		      
		      for (int i=0;i<BUFFER_SIZE/RECORD_SIZE;i++){
		    	  
		    	 String line=contentS.substring(i*RECORD_SIZE,i*RECORD_SIZE+RECORD_SIZE);
    			 data[i] = new String[fields.size()]; 
 				 int k=0;
				 for (int j=0;j<fields.size();j++){
					String field=null;
				   	field=   line.substring(k,k+fields.get(j).getFieldLength());
					data[i][j]=field;
					k=k+fields.get(j).getFieldLength();
				 }		
		    	  
		      }
			
			

		    FILE_POINTER=afile.getFilePointer();
			afile.close();
			
			//ucitavanje novog bloka treba da izazove osvezivanje podataka u tabeli
			fireUpdateBlockPerformed();

   
		return true;
		
     }
	
	
	 
	/**
	 *  Metoda za dodavanje sloga u serijskoj datoteci, dodavanje se uvek vrši na kraj
	 * datoteke. 
	 *  
	 */
	
   public boolean addRecord(ArrayList<String> record)throws IOException{
           
		   String newRecord="\r\n";
		   for (int i=0;i<record.size();i++){
			   newRecord=newRecord+record.get(i); 
		   }
		   
		   RandomAccessFile afile=new RandomAccessFile(path+File.separator+fileName,"rw");
		   
		   afile.seek(afile.length());
		   afile.writeBytes(newRecord);
		   afile.setLength(afile.length());
	       afile.close();
	       return true;
   }


   /**
    *  Izmenu podataka u serijskoj datoteci necemo raditi
    *  
    */
   public boolean updateRecord(ArrayList<String> record) throws IOException{
	  
	   return false;
   }

   
   /**
    *  Pretraga u serijskoj datoteci koja pocinje od pocetka datoteke
    * Moze da se pretrazuje po bilo kom polju datoteke
    * metoda zaustavlja pretragu na prvom slogu koji zadovoljava zadate kriterijume
    * ili po neuspesnom trazenju sloga a to je na kraju datoteke
    */
   public boolean findRecord(ArrayList<String> searchRec,int[] position){
	   FILE_POINTER=0;
	   boolean result=false;
	   
	   while (FILE_POINTER<FILE_SIZE && position[0]==-1){
	   try {
		   fetchNextBlock();
	   } catch (IOException e) {
		   e.printStackTrace();
		   position[0]=-1;
		   return false;
	   }
	   
	   for (int row=0;row<data.length;row++){
           
		    if (isRowEqual(data[row],searchRec)){
             	 position[0]=row;
               	 return true;
		     }
		   
	   }
	   }
	   
	   return result;
   }

   /**
    * 
    * @param aData - jedan slog iz bloka datoteke
    * @param searchRec - parametri pretrage
    * @return - true ukoliko dati slog iz bloka sadrzi polja koja odgovaraju parametrima pretrage
    */
   private boolean isRowEqual(String [] aData, ArrayList<String> searchRec){
	   boolean result=true;
	   
	
		     for (int col=0;col<fields.size();col++){
		    	 if (!searchRec.get(col).trim().equals("")){
		    		  if (!aData[col].trim().equals(searchRec.get(col).trim())){
		    			  result=false;
		    			  return result;
		    		  }
		    	 }

		   
	   }	   
	   
	   return result;
   }
   
   
   /**
    * Brisanje u serijskoj datoteci realizovati logički
    */
	public boolean deleteRecord(ArrayList<String> searchRec) {
		// TODO Auto-generated method stub
		return false;
	}

	
	
	
	public boolean makeSEKFile() throws IOException{
	    boolean result=true;
	   
	    //prvo pozivamo sortiranje serijske datoteke
	    //pre sortiranja trebamo obezbediti sortiranje po rastucoj vrednosti kljuca 
	    makeSortPK();
	  
	    try {
		  sortMDI();
	    } catch (IOException e) {
		    JOptionPane.showMessageDialog(AppCore.getInstance(),e.getMessage(),"Greška",JOptionPane.ERROR_MESSAGE);
  		    //neuspesno sortiranje
		    result=false;
		    return result;
        }
       
	    
	    //posle sortiranja u baferu data[][] imamo sortirane slogove
	    //trebamo jos da napravimo novu sekvencijalnu datoteke sa novim headerom
	    String headerSekName=headerName.replaceAll(".ser",".sek");
	    File serHeader=new File(path+File.separator+headerSekName);
	    if (!serHeader.exists()){
			serHeader.createNewFile();
	    }	 
	   
	   
		//otvaramo header file serijske datoteke
		RandomAccessFile afile=new RandomAccessFile(path+File.separator+headerName,"r");
		byte [] temp_buffer=new byte[(int) afile.length()];
		//promenicemo putanju do fajla sa podacima
		String tpath=afile.readLine();
		tpath=tpath.replace(".txt",".stxt");
		afile.read(temp_buffer);
		afile.close();

		
		//u header sekvencijalne datoteke upisujemo novu putanju i isti opis
		afile=new RandomAccessFile(serHeader.getAbsoluteFile(),"rw");
		afile.seek(0);
		afile.writeBytes(tpath+"\r\n");
		afile.write(temp_buffer);
		afile.setLength(afile.length());
		afile.close();
			

		//jos ostaje da se sortirani slogovi upisu u novu datoteku
		String fileSekName=fileName.replaceAll(".txt",".stxt");
		File serText=new File(path+File.separator+fileSekName);
		serText.createNewFile();
		afile=new RandomAccessFile(serText.getAbsoluteFile(),"rw");
		afile.seek(0);
		
		for (int i=0;i<data.length;i++){
		     for (int j=0;j<fields.size();j++){
		          afile.writeBytes(data[i][j].toString());
		     }     
		     afile.writeBytes("\r\n");
		}
		
		afile.close();
		
		AppCore.getInstance().getLista().setModel(new ListaModel(path));
		//sekvencijalna datoteka je kreirana, vrsimo njen prikaz:
		UISEKFile uifile=new UISEKFile(path,serHeader.getName(),false);
		FileView fileView=new FileView(uifile);
    	AppCore.getInstance().setFileView(fileView);
    	AppCore.getInstance().getFramework().setSelectedIndex(AppCore.getInstance().getFramework().getSelectedIndex()+1);
    	
	   
	   
	   
	   
	   return result;
	}

	

	}
