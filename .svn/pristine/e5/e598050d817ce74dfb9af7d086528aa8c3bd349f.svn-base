package view;



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;

import model.TabelaModel;
import model.file.UIAbstractFile;
import model.file.UIINDFile;
import model.file.UISEKFile;
import model.file.UISERFile;
import model.tree.Node;
import model.tree.NodeElement;
import model.tree.TreeCellRendered;
import event.UpdateBlockEvent;
import event.UpdateBlockListener;

@SuppressWarnings("serial")
public class FileView extends JPanel implements  UpdateBlockListener,TreeSelectionListener{
  
	private UIAbstractFile uiFile;
	private JTable table;
	private JTable overZoneTable;
	
	private JPanel panTop;
	
	private JTextField txtBlockSize;
	private JTextField txtFileSize;
	private JTextField txtRecordSize;
	private JTextField txtRecordNum;
	private JTextField txtBlockNum;
	
	
	private JTree indexTree;
	
	public FileView(final UIAbstractFile uiFile) {
		super();
		setLayout(new BorderLayout());
		this.uiFile=uiFile;
		try {
			this.uiFile.readHeader();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		this.uiFile.addUpdateBlockListener(this);
		
		
	    //inicijalizacija gornjeg dela panela	
		panTop=new JPanel(new BorderLayout());
		initPanParams();
		initPanToolbar();
		
	
		
		

		
		table=new JTable();
		table.setModel( new TabelaModel(uiFile.getFields(),uiFile.getData()));
		JScrollPane scr=new JScrollPane(table);
		if (uiFile.getHeaderName().contains(".ind")){
			//zona prekoracenja u novoj tabeli, ista struktura kao i osnovni fajl
			
			overZoneTable=new JTable();
			overZoneTable.setModel( new TabelaModel(uiFile.getFields(),uiFile.getData()));
			JScrollPane scrOZT=new JScrollPane(overZoneTable);
			
		    
		    JSplitPane splitVer=new JSplitPane(JSplitPane.VERTICAL_SPLIT,scr,scrOZT);
		    splitVer.setDividerLocation(400);
			
		    
		    DefaultTreeModel treeModel=new DefaultTreeModel(((UIINDFile)uiFile).getTree().getRootElement());
		    indexTree=new JTree(treeModel);
		    TreeCellRendered rendered=new TreeCellRendered();
		    indexTree.setCellRenderer(rendered);
		    indexTree.addTreeSelectionListener(this);
			JScrollPane scTree=new JScrollPane(indexTree);
			JSplitPane splitHor=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,scTree,splitVer);
			splitHor.setDividerLocation(300);
			add(splitHor,BorderLayout.CENTER);
			
		}else{
			add(scr,BorderLayout.CENTER);
		} 
	}


	
    private void initPanParams(){
    	JPanel panParams=new JPanel(new FlowLayout(FlowLayout.LEFT));
		
		
		
		//velicina bloka - moze da se menja
		panParams.add(new JLabel("f (block factor):"));
		txtBlockSize=new JTextField();
		txtBlockSize.setColumns(5);
		txtBlockSize.setText(String.valueOf(uiFile.getBLOCK_FACTOR()));
		panParams.add(txtBlockSize);
		JButton btnChangeBS=new JButton("Change f");
		btnChangeBS.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				 
				uiFile.setBLOCK_SIZE(Integer.valueOf(txtBlockSize.getText()).longValue());
				txtBlockNum.setText(String.valueOf(uiFile.getBLOCK_NUM()));
				
			}
			
		});
		panParams.add(btnChangeBS);

		
		//velicina datoteke
		panParams.add(new JLabel("File size:"));
		txtFileSize=new JTextField();
		txtFileSize.setColumns(7);
		txtFileSize.setEnabled(false);
		
		txtFileSize.setText(String.valueOf(Math.ceil(uiFile.getFILE_SIZE()/1024.0000))+"KB");
		panParams.add(txtFileSize);
		
		

		
		
		//velicina linije u datoteci  
		panParams.add(new JLabel("Record size(B):"));
		txtRecordSize=new JTextField();
		txtRecordSize.setColumns(7);
		txtRecordSize.setEnabled(false);
		txtRecordSize.setText(String.valueOf(uiFile.getRECORD_SIZE()));
		panParams.add(txtRecordSize);
		
		
		//broj recorda u datoteci  
		panParams.add(new JLabel("Record num:"));
		txtRecordNum=new JTextField();
		txtRecordNum.setColumns(7);
		txtRecordNum.setEnabled(false);
		txtRecordNum.setText(String.valueOf(uiFile.getRECORD_NUM()));
		panParams.add(txtRecordNum);

		
		//broj blokova u datoteci  
		panParams.add(new JLabel("Block num:"));
		txtBlockNum=new JTextField();
		txtBlockNum.setColumns(7);
		txtBlockNum.setEnabled(false);
		txtBlockNum.setText(String.valueOf(uiFile.getBLOCK_NUM()));
		panParams.add(txtBlockNum);

		
		
		
		panParams.setBackground(new Color(153,204,255));
		panTop.add(panParams, BorderLayout.NORTH);
		
		   	
    	
    }

     
    private void initPanToolbar(){
    	JPanel panToolbar=new JPanel(new FlowLayout(FlowLayout.RIGHT));
    	
		JButton btnFetch=new JButton("Fetch next block");
		btnFetch.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				uiFile.setMODE(UISERFile.BROWSE_MODE);
				try {
					uiFile.fetchNextBlock();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			}
			
		});
		panToolbar.add(btnFetch);	
		
		
		JButton btnAdd=new JButton("Add Record");
		btnAdd.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				uiFile.setMODE(UISERFile.ADD_MODE);
				AUFRow addRow=new AUFRow(arg0.getActionCommand(),uiFile.getFields());
				
				addRow.setModal(true);
				addRow.setVisible(true);
				try {
					uiFile.addRecord(addRow.getResultRecord());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
		panToolbar.add(btnAdd);		

		
		JButton btnDelete=new JButton("Delete Record");
		panToolbar.add(btnDelete);		
		
		JButton btnFind=new JButton("Find Record");
		
		btnFind.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				uiFile.setMODE(UISERFile.FIND_MODE);
				AUFRow findRow=new AUFRow(arg0.getActionCommand(),uiFile.getFields());
				findRow.setModal(true);
				findRow.setVisible(true);
				int[] position = new int[1];
				position[0]=-1;
				
				if (!uiFile.findRecord(findRow.getResultRecord(),position)){
				     JOptionPane.showMessageDialog(null, "Traženi slog nije pronađen.", "UI Project", 1);
				     table.getSelectionModel().setSelectionInterval(position[0],position[0]);
				}else //uspešna pretraga
					 //ako je pretrage u indeks-sekvencijalnoj datoteci treba osveziti i path u stablu:
					
				     table.getSelectionModel().setSelectionInterval(position[0],position[0]);
				//TreePath path=new TreePath(findResult.getPath());
				//indexTree.setSelectionPath(path);
				
			}
			
		});
		panToolbar.add(btnFind);

		
		JButton btnSortMDI=new JButton("Sort MDI");
		btnSortMDI.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				PrepareSortFile pSort=new PrepareSortFile("Select sort parametars for MDI",uiFile.getFields());
				pSort.setModal(true);
				pSort.setVisible(true);
				
				try {
					
					setCursor(new Cursor(Cursor.WAIT_CURSOR));
					uiFile.sortMDI();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally{
					setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				}
				
			}
			
		});
       panToolbar.add(btnSortMDI);

		
		JButton btnSortMM=new JButton("Sort MM");
		btnSortMM.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				PrepareSortFile pSort=new PrepareSortFile("Select sort parametars for MM",uiFile.getFields());
				pSort.setModal(true);
				pSort.setVisible(true);
				
				try {
					
					setCursor(new Cursor(Cursor.WAIT_CURSOR));
					uiFile.sortMM();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally{
					setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				}
				
			}
			
		});
		panToolbar.add(btnSortMM);

		
		JButton btnMakeSek=new JButton("Make .sek");
		btnMakeSek.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				try {
					setCursor(new Cursor(Cursor.WAIT_CURSOR));
					((UISERFile)uiFile).makeSEKFile();
				} catch (IOException e) {
					
					e.printStackTrace();
				}finally{
					setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				}
				
			}
			
		});
		
		
		if (uiFile.getHeaderName().contains(".ser")){
			   //samo za serijske datoteke je omogucena ova akcija
			panToolbar.add(btnMakeSek);
		}
		
		
		
		//samo za sekvencijalne fajlove, pravljenje indeks sekvencijalne datoteke
		JButton btnMakeIND=new JButton("Make .ind");
		btnMakeIND.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				try {
					setCursor(new Cursor(Cursor.WAIT_CURSOR));
					((UISEKFile)uiFile).makeINDFile();
				} catch (IOException e) {
					
					e.printStackTrace();
				}finally{
					setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				}
				
			}
			
		});
		
		
		if (uiFile.getHeaderName().contains(".sek")){
			   //samo za sekvencijalne datoteke je omogucena ova akcija
			panToolbar.add(btnMakeIND);
		}
		
		
        panTop.add(panToolbar,BorderLayout.CENTER);		
		add(panTop,BorderLayout.NORTH);    	
    	
    }
	public UIAbstractFile getUiFile() {
		return uiFile;
	}



    
	public void updateBlockPerformed(UpdateBlockEvent e) {
		table.setModel(new TabelaModel(uiFile.getFields(),uiFile.getData()));
	}



	public void valueChanged(TreeSelectionEvent e) {
		// implementirati otvaranje bloka koji sadrži slog sa vrednošću ključa
		// prvog elementa u čvoru
		Node node= (Node) e.getPath().getLastPathComponent();
		if (node.getChildCount()==0){
			System.out.println("Ovo je list stabla");
			NodeElement nodeElement= node.getData().get(0);
			int newFilePointer =  nodeElement.getBlockAddress()*uiFile.getRECORD_SIZE();
			uiFile.setFILE_POINTER(newFilePointer);
			try {
				uiFile.fetchNextBlock();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			
			
		}
		
	}



}
