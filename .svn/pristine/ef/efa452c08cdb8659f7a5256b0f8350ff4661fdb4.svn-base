package model.file;



import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import model.ListaModel;
import model.tree.KeyElement;
import model.tree.Node;
import model.tree.NodeElement;
import model.tree.Tree;
import ui.app.AppCore;
import view.FileView;


public class UISEKFile extends UIAbstractFile {
	

	
	
	public UISEKFile(String path,String headerName, boolean directory) {
		super(path,headerName,directory);
	
	}


	public UISEKFile() {
		super();
	}







    /**
     *  Prenos bloka iz datoteke u radnu memoriju aplikacije
     *  Velicina bloka određena je atributom BLOCK_SIZE 
     *  Po zavšetku metode blok podataka iz datoteke
     *  nalazi se u radnoj memoriji aplikaciji
     *  u matrici datа[][]
     * @throws IOException 
     * 
     */	
	public boolean fetchNextBlock() throws IOException{
    	       
				  
			  RandomAccessFile afile=new RandomAccessFile(path+File.separator+fileName,"r");
			  FILE_SIZE=afile.length();
			  RECORD_NUM=(long) Math.ceil((FILE_SIZE*1.0000)/(RECORD_SIZE*1.0000));
			  BLOCK_NUM=(int) (RECORD_NUM/BLOCK_FACTOR)+1;
			  
			  
			  //BUFFER_SIZE je uvek jednak broju slogova u jednom bloku * velicina jednog sloga
			  //izuzev ako poslednji blok nije pun blok
			  if (FILE_POINTER/RECORD_SIZE+BLOCK_FACTOR>RECORD_NUM) 
				   BUFFER_SIZE=(int) (RECORD_NUM-FILE_POINTER/RECORD_SIZE)*RECORD_SIZE;
			  else 
				   BUFFER_SIZE=(int)(RECORD_SIZE*BLOCK_FACTOR);
			  
			  buffer=new byte[BUFFER_SIZE];
			  data = new String[(int) BUFFER_SIZE/RECORD_SIZE][];
			  //po otvaranju pozicioniram se na prethodni kraj zahvata
			  afile.seek(FILE_POINTER);
			  afile.read(buffer);
		      String contentS=new String(buffer);
		      if (contentS.length()<buffer.length){
		    	  for (int x=contentS.length();x<buffer.length;x++)
		    		  contentS=contentS+" ";
		      }
		
		      
		      for (int i=0;i<BUFFER_SIZE/RECORD_SIZE;i++){
		    	  
		    	 String line=contentS.substring(i*RECORD_SIZE,i*RECORD_SIZE+RECORD_SIZE);
    			 data[i] = new String[fields.size()]; 
 				 int k=0;
				 for (int j=0;j<fields.size();j++){
					String field=null;
				   	field=   line.substring(k,k+fields.get(j).getFieldLength());
					data[i][j]=field;
					k=k+fields.get(j).getFieldLength();
				 }		
		    	  
		      }
			
			

		    FILE_POINTER=afile.getFilePointer();
			afile.close();
			
			//ucitavanje novog bloka treba da izazove osvezivanje podataka u tabeli
			fireUpdateBlockPerformed();
	
   
		return true;
		
     }
	
	
	 
	/**
	 *  Metoda za dodavanje sloga u sekvencijalnoj datoteci
	 * datoteke. 
	 *  
	 */
	
   public boolean addRecord(ArrayList<String> record)throws IOException{
           
		 boolean result=true;
		 //dodavanje slogova treba poceti neuspensom pretragom po kljucu
		 //argument trazenja su vrednosti obelezja koje se zele dodati
		 ArrayList<String> temp=new ArrayList<String>();
		 for (int i=0;i<fields.size();i++){
			 if (fields.get(i).isFieldPK()){
				 if (record.get(i).trim().equals("")){
					  //nije uneta vrednost kljuca, ne mozemo nastaviti unos:
					 
					 JOptionPane.showMessageDialog(null, "Niste uneli vrednost obeležja "+fields.get(i).getFieldName(), "UI Project", 1);
					 return false;
				 }else{
					  
					 temp.add(record.get(i));
				 }
			 }else{
				 temp.add(" ");
			 }
			 
		 }
		 int[] position=new int [1];
		 position[0]=-1;
		 if (findRecord(temp,position)){
			 JOptionPane.showMessageDialog(null, "Slog sa istom vrednošću PK već postoji", "UI Project", 1);
			 return false;
			 
		 }
		 //slog sa istom vrednoscu kljuca ne postoji a u position se nalazi
		 //relativne  adresa lokacija na kojoj treba smestiti novi slog
		 long oldFilePointer=(FILE_POINTER/RECORD_SIZE-BLOCK_FACTOR)*RECORD_SIZE;
		 long newPosition=FILE_POINTER/RECORD_SIZE-BLOCK_FACTOR+position[0];
		 
		 RandomAccessFile afile=new RandomAccessFile(path+File.separator+fileName,"rw");
		 byte [] record_buffer=new byte[RECORD_SIZE];
		 for (int i=(int) RECORD_NUM-1;i>=newPosition;i--){
		              	afile.seek(i*RECORD_SIZE);
		              	afile.read(record_buffer);
		              	afile.write(record_buffer);
		 }
		 //ostalo je još da dodamo novi slog
		 String newRecord="";
		 for (int i=0;i<record.size();i++){
			   newRecord=newRecord+record.get(i); 
		 }
		   
		 newRecord=newRecord+"\r\n";
		 afile.seek(newPosition*RECORD_SIZE);
		 afile.writeBytes(newRecord);
		 afile.close();
		 FILE_POINTER=oldFilePointer;
		 fetchNextBlock();
		 return result;
		 
   }


   /**
    *  
    *  
    */
   public boolean updateRecord(ArrayList<String> record) throws IOException{
	  
	   return false;
   }

   
   /**
    *  Pretraga u sekvencijalnoj datoteci koja pocinje od pocetka datoteke
    * Moze da se pretrazuje po bilo kom polju datoteke
    * metoda zaustavlja pretragu na prvom slogu koji zadovoljava zadate kriterijume
    * ili po neuspesnom trazenju sloga a to je na kraju datoteke
    * Ukoliko se pretraga vrsi po kljucu pretraga se moze zaustaviti pri prvoj 
    * vecoj vrednosti od kljuca
    */
   public boolean findRecord(ArrayList<String> searchRec,int[] position){
	   FILE_POINTER=0;
	   boolean result =false;
	   
	   while (FILE_POINTER<FILE_SIZE && position[0]==-1){
	   try {
		   fetchNextBlock();
	   } catch (IOException e) {
		   e.printStackTrace();
		   position[0]=-1;
		   return false;
	   }
	   
	   for (int row=0;row<data.length;row++){
           
		    if (isRowEqual(data[row],searchRec)){
             	 position[0]=row;
		    	 return true;
		     }else if (isRowGreater(data[row],searchRec)){
		    	 position[0]=row;
		    	 
		    	 return false;
		     }
		   
	   }
	   }
	   return result;
   }

   /**
    * 
    * @param aData - jedan slog iz bloka datoteke
    * @param searchRec - parametri pretrage
    * @return - true ukoliko dati slog iz bloka sadrzi polja koja odgovaraju parametrima pretrage
    */
   private boolean isRowEqual(String [] aData, ArrayList<String> searchRec){
	   boolean result=true;
	   
	
		     for (int col=0;col<fields.size();col++){
		    	 if (!searchRec.get(col).trim().equals("")){
		    		  if (!aData[col].trim().equals(searchRec.get(col).trim())){
		    			  result=false;
		    			  return result;
		    		  }
		    	 }

		   
	   }	   
	   
	   return result;
   }
   
   /**
    * metoda koja proverava da li je tekući slog pretrage veći od zadatog parametra traženja
    * @param aData -slog iz datoteke u baferu koji se poredi
    * @param searchRec - parametri pretrage
    * @return
    */
   private boolean isRowGreater(String [] aData, ArrayList<String> searchRec){
	   boolean result=true;
	   int noPK=0;
	   boolean prev=true;
	   
	   for (int i=0;i<fields.size();i++){
		   if (!searchRec.get(i).trim().equals("") && !fields.get(i).isFieldPK()){
		          return false;	       
		   }
           if (fields.get(i).isFieldPK())noPK++;
		   
	   }
       
	   
	   
		for (int col=0;col<fields.size();col++){
			     
		    	 if (!searchRec.get(col).trim().equals("")){
		    		 
		    		  if (aData[col].trim().compareToIgnoreCase(searchRec.get(col).trim())>0 && col<noPK-1){
		    			  return true;
		    			  
		    		  }else if (aData[col].trim().compareToIgnoreCase(searchRec.get(col).trim())!=0 && col<noPK-1){
		    			  result=false;
		    			  prev=false;
		    		  }
		    		  else if (aData[col].trim().compareToIgnoreCase(searchRec.get(col).trim())<=0){
		    			  result=false;
		    			  
		    		  }else if (aData[col].trim().compareToIgnoreCase(searchRec.get(col).trim())>0 && prev && col==(noPK-1)){
		    			  result=true;
		    		  }
		    	 }
		     }	   
	   
	   return result;
   }  
   /**
    * 
    */
	public boolean deleteRecord(ArrayList<String> searchRec) {
		// TODO Auto-generated method stub
		return false;
	}

	
	
	public void makeINDFile()throws IOException{
		 makeTree();
		 String headerINDName=makeINDHeader();
		 
		AppCore.getInstance().getLista().setModel(new ListaModel(path));
		//indeks - sekvencijalna datoteka je kreirana, vrsimo njen prikaz:
		UIINDFile uifile=new UIINDFile(path,headerINDName,false);
		uifile.FILE_POINTER=0;
		FileView fileView=new FileView(uifile);
	    AppCore.getInstance().setFileView(fileView);
	    AppCore.getInstance().getFramework().setSelectedIndex(AppCore.getInstance().getFramework().getSelectedIndex()+1);
	}
	
	
	public String makeINDHeader()throws IOException{
		
		
	    String headerINDName=headerName.replaceAll(".sek",".ind");
	    File indHeader=new File(path+File.separator+headerINDName);
	    if (!indHeader.exists()){
	    	indHeader.createNewFile();
	    }	 
	   
	   
		//otvaramo header file indeks-sekvencijalne datoteke
		RandomAccessFile afile=new RandomAccessFile(path+File.separator+headerName,"r");
		byte [] temp_buffer=new byte[(int) afile.length()];
		//promenicemo putanju do fajla sa podacima
		afile.read(temp_buffer);
		afile.close();

		
		//u header indeks-sekvencijalne datoteke upisujemo novu putanju i isti opis
		afile=new RandomAccessFile(indHeader.getAbsoluteFile(),"rw");
		afile.seek(0);
		//dodajemo jos i putanju do stable
		afile.writeBytes("tree/"+headerName.replaceAll(".sek",".tree")+"\r\n");
		afile.writeBytes("overZone/"+headerName.replaceAll(".sek",".over")+"\r\n");
		afile.write(temp_buffer);
		afile.setLength(afile.length());
		afile.close();
		return headerINDName;
	}
	
	
	
	
	
	
	public void makeTree()throws IOException{
		FILE_POINTER=0;
		List<Node> listNodes=new ArrayList<Node>();
		
		Tree tree=null;
		long tFilePointer=0;

		//citanje bloka po bloka i formiranje za svaki blok po jedan NodeElement
		//sva NodeElementa cine jedan Node
	    while (FILE_POINTER<FILE_SIZE ){
	    	tFilePointer=FILE_POINTER;
			fetchNextBlock();
			List <KeyElement> listKeyElements=new ArrayList<KeyElement>();
			
			List <NodeElement> listNodeElements=new ArrayList<NodeElement>();
		    for (int i=0;i<fields.size();i++){
		    	if (fields.get(i).isFieldPK()){
		    		KeyElement keyElement=new KeyElement(fields.get(i).getFieldType(),data[0][i]);
		    		listKeyElements.add(keyElement);
		    	}
			
	    	}
		    //posle ovoga moze se kreirati jedan NodeElement
		    NodeElement nodeElement=new NodeElement((int) (tFilePointer/RECORD_SIZE),listKeyElements);

		    
		    listNodeElements.add(nodeElement);
		    Node node=new Node(listNodeElements);
		    tFilePointer=FILE_POINTER;
			fetchNextBlock();
		    listKeyElements=new ArrayList<KeyElement>();
			
		    for (int i=0;i<fields.size();i++){
		    	if (fields.get(i).isFieldPK()){
		    		KeyElement keyElement=new KeyElement(fields.get(i).getFieldType(),data[0][i]);
		    		listKeyElements.add(keyElement);
		    	}
			
	    	}
		    //posle ovoga moze se kreirati jod jedan NodeElement
		    nodeElement=new NodeElement((int) (tFilePointer/RECORD_SIZE),listKeyElements);

		    
		    listNodeElements.add(nodeElement);
		    //dva NodeElement-a cine jedan Node
		    node=new Node(listNodeElements);
		    listNodes.add(node);		
		}
	    
		 //posle ovoga u listNodes imamo za svaka 2  bloka po jedan Node
	    
	    
	    
	    
	    //prolazak kroz Nodov-e prvog nivoa i formiranje ostalih nivoa:
	    //od dva susedne Node-a iz liste listNodes uzimaju se podaci prvog NodeElement-a
	    // i pravi novi Node na visem nivou. Njegovi NodeElementi imaju kao adresu
	    //ne adresu bloka u datoteci već poziciju u listi childova neposrednog NodeElement-a
	  
	    //....
	    //....
	    //....
	    //.....
	    
	    
	    //ovaj Node treba da bude koren stabla, odnosno poslednji Node koji ćete kreirati
	    Node root=new Node();
	    
	    tree=new Tree();
	    tree.setRootElement(root);
	    

	    
		 FILE_POINTER=0;
		//imamo stablo potrebno je serijalizovati ga
		ObjectOutputStream os;
		String treeFileName=headerName.replaceAll(".sek",".tree");
		try{
			os = new ObjectOutputStream(new FileOutputStream(path+File.separator+treeFileName));
			os.writeObject(tree);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
			
	}	

	}
